// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PropositionManager.Data;

#nullable disable

namespace PropositionManager.Data.Migrations
{
    [DbContext(typeof(PropositionManagerContext))]
    [Migration("20250606092558_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PropositionManager.Data.Enums.CurrencyEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Dictionary_Currency");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Euro"
                        },
                        new
                        {
                            Id = 2,
                            Name = "SwissFranc"
                        },
                        new
                        {
                            Id = 3,
                            Name = "UsDollar"
                        });
                });

            modelBuilder.Entity("PropositionManager.Data.Enums.PriceStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Dictionary_PriceStatus");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Created"
                        },
                        new
                        {
                            Id = 2,
                            Name = "InReview"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Rejected"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Deleted"
                        });
                });

            modelBuilder.Entity("PropositionManager.Data.Enums.ProductTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Dictionary_ProductType");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Electricity"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Gas"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Internet"
                        },
                        new
                        {
                            Id = 4,
                            Name = "MobileMinutes"
                        },
                        new
                        {
                            Id = 5,
                            Name = "MobileData"
                        });
                });

            modelBuilder.Entity("PropositionManager.Data.Enums.TariffDurationUnitEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Dictionary_TariffDurationUnit");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Second"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Minute"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Hour"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Day"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Month"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Year"
                        });
                });

            modelBuilder.Entity("PropositionManager.Model.Entities.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(19, 6)
                        .HasColumnType("decimal(19,6)");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PriceStatus")
                        .HasColumnType("int");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("PriceDuration", "PropositionManager.Model.Entities.Price.PriceDuration#TariffDuration", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<int>("Quantity")
                                .HasColumnType("int");

                            b1.Property<int>("TariffDurationUnit")
                                .HasColumnType("int");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PricePeriod", "PropositionManager.Model.Entities.Price.PricePeriod#Period", b1 =>
                        {
                            b1.Property<DateTimeOffset>("From")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("PeriodFrom");

                            b1.Property<DateTimeOffset?>("Until")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("PeriodUntil");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Currency");

                    b.HasIndex("PriceStatus");

                    b.HasIndex("ProductType");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("PropositionManager.Model.Entities.Proposition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("MarketPeriod", "PropositionManager.Model.Entities.Proposition.MarketPeriod#Period", b1 =>
                        {
                            b1.Property<DateTimeOffset>("From")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("PeriodFrom");

                            b1.Property<DateTimeOffset?>("Until")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("PeriodUntil");
                        });

                    b.HasKey("Id");

                    b.ToTable("Propositions");
                });

            modelBuilder.Entity("PropositionManager.Model.Entities.PropositionPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PriceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PropositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("PropositionPricePeriod", "PropositionManager.Model.Entities.PropositionPrice.PropositionPricePeriod#Period", b1 =>
                        {
                            b1.Property<DateTimeOffset>("From")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("PeriodFrom");

                            b1.Property<DateTimeOffset?>("Until")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("PeriodUntil");
                        });

                    b.HasKey("Id");

                    b.HasIndex("PriceId");

                    b.HasIndex("PropositionId");

                    b.ToTable("PropositionPrices");
                });

            modelBuilder.Entity("PropositionManager.Model.Entities.TariffDuration", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TariffDurationUnit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TariffDurationUnit");

                    b.ToTable("TariffDurations");
                });

            modelBuilder.Entity("PropositionManager.Model.Entities.Price", b =>
                {
                    b.HasOne("PropositionManager.Data.Enums.CurrencyEntity", null)
                        .WithMany()
                        .HasForeignKey("Currency")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PropositionManager.Data.Enums.PriceStatusEntity", null)
                        .WithMany()
                        .HasForeignKey("PriceStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PropositionManager.Data.Enums.ProductTypeEntity", null)
                        .WithMany()
                        .HasForeignKey("ProductType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PropositionManager.Model.Entities.PropositionPrice", b =>
                {
                    b.HasOne("PropositionManager.Model.Entities.Price", "Price")
                        .WithMany("PropositionPrices")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PropositionManager.Model.Entities.Proposition", "Proposition")
                        .WithMany("PropositionPrices")
                        .HasForeignKey("PropositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Price");

                    b.Navigation("Proposition");
                });

            modelBuilder.Entity("PropositionManager.Model.Entities.TariffDuration", b =>
                {
                    b.HasOne("PropositionManager.Data.Enums.TariffDurationUnitEntity", null)
                        .WithMany()
                        .HasForeignKey("TariffDurationUnit")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PropositionManager.Model.Entities.Price", b =>
                {
                    b.Navigation("PropositionPrices");
                });

            modelBuilder.Entity("PropositionManager.Model.Entities.Proposition", b =>
                {
                    b.Navigation("PropositionPrices");
                });
#pragma warning restore 612, 618
        }
    }
}
